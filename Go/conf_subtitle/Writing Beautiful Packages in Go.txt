so right what are we going to talk about

today then well we're going to talk

about packages and libraries and and and

I'm really kind of understanding what we

really mean by this stuff for those that

don't know a packaging go is a basically

a folder full of go files

hopefully with test files too they can

be imported into other projects we're

not talking about commands you know

we're talking about things that you

import to help you use help do something

solve some of the problem for you that

hopefully somebody else has written for

you yeah but you you also hopefully

open-source these as well and that's

kind of part of the whole kind of go

ethos since it's an open source project

itself it's great to to you know

contribute if you can and and and I'm

gonna hopefully cover some some

practices and some things that we can we

can do to write these beautiful packages

that everyone's going to want to use so

what do I really mean then what is a

beautiful package well yes it's quite

tough to define it in fact they're

elegant and simple

you have a very familiar feeling might

be obvious you know when you look at it

when you just glance at the API it's it

should be quite obvious what it's going

to do you you hopefully already know how

to use it just by kind of looking at it

you know we can just be self-similar as

a go community and if we do that it

gives us a kind of head start when we

jump into actually working on these and

there are packages that I look forward

to using and some that I don't and

therefore I think there's we can say

that packages are better than others in

some ways and we can look at why that is

and and talk about it and that's what

I'm gonna do not going to like show

terrible packages or anything don't

worry so when you come to write a

package then motivation is is one of the

one of the things to think about from

the beginning I think don't write

packages for the sake of it it's very

tempting and sometimes we want to do it

for fun

and do if you want to do it for fun do

it but but really the the the best

packages are ones where you solve your

own problems solving something you need

and you're not kind of guessing you're

not doing something assuming this is

someone's gonna have this problem so I'm

gonna preempt it it's tough to get that

right and you know it's more difficult

so and if you have a big project and you

think okay here's a little piece of our

thing that we need but the open-source

community probably gonna appreciate it

to then keep internal to start without

say really get it battle-tested when

you're happy with it you'll learn so

much just by doing that the it's going

to be a better package once it's once

it's ready to go and you know this the

the web 2.0 movement gave us these

gorgeous websites that are very easy to

use and you know the informations at the

top that you need and you can easily

find other bits of information by

drilling down and all this this was this

whole kind of web 2.0 movement and it's

kind of started with people thinking

about user centered design things like

this so they started to build personas a

bit like as Steve was talking about in

the keynote starting to think about

users really quite obsessively and not

just what they're trying to do but how

they're feeling about using the software

and and and you know what their goals

are and what their their motivations are

and you know packages in go and really

any language they are they have an API

you know they have an interface and

although we think of them as running in

production at scale by you know in its

machines calling calling them well

really they're not they're they are used

by humans initially right that says

where the humans I'm talking about so

that this user centered design applies

directly to write in packages I think so

we should think about the same way so

think about who's using the package what

are they trying to do with

and in what context are they using it is

it is it something that's foundational

to a project so you're going to spend a

lot of time with it in the beginning and

then you won't touch it

is it something they're just using

testing or debugging is it a package

that they're gonna call throughout the

code it's gonna be scattered everywhere

you know those thinking about that and

the use and where your package is gonna

be but that I think is is pretty vital

when it comes to your design too far

I was in Spitalfields market once and

one of the market vendor guys said to me

became really close a bit too close and

said I like specific things which is the

best sentence I've ever heard and told

me nothing about him but yeah it likes

specific things which is fine so let's

get into some specific things about

packages smaller footprints I think a

better I think we can say you know the

by footprint I mean you know the number

of exported things if you type io util

dot in most ideas you will get a list of

what's available to you and if that list

is like this you can just see it all in

one go then that's pretty good you know

we can see what's available in the

package we know what to do with it you

can't always do that sometimes the

packages are gonna grow you know but the

goal I think should be to drive towards

smaller footprints if we can just so

that it's easier and of course narrow

types are simpler so in this case I've

have this right Jason line and I'm

taking a file it's going to take an

object and write Marshall it is Jason

and save it in a file but this top one

can only write to a file whereas if we

change that and you know since the file

is an IO writer as well if we use our

writer instead suddenly we can write to

all kinds of different things that that

support I a writer it can still use the

file but now we can also do it to a

buffer and so we can not marshal stuff

in memory now we can do it to an HTTP

response writer that's a writer too and

therefore he works in servers now

and we can also use since the standard

library and other packages use these

these basic interfaces you can use those

too so we can now I can zip it easily so

it's things like that thinking about

narrow narrow types and sometimes

especially in this case actually you may

only have changed the signature you

probably depending on what your code is

doing you wouldn't even notice apart

from others have changed the variable

name but otherwise the code probably

inside it might just remain the same so

it's literally just a you know thinking

about it from that perspective and it's

worth seeking out single method

interfaces of your own as well

single method interfaces are they

they're so much better than even two two

methods is better than having three it's

simpler

but there's something special about just

one method in an interfacing go and your

code that you the packages that you

write and you know you probably can find

these yourself these these modeling

these concepts in this way and if it's

only got one method then it's easier to

implement and that's the point of an

interface we want people to implement

them right we want our users to

implement these interfaces and then of

course there's there's things you can do

if it's only a single method this

basically this slide is in every talk I

do I

I still love this I can't I can't go

over it I won't explain it because you

probably already know but google it if

you don't know or search from you know

different provider and lots of search

engines available just balance Bing Ask

Jeeves is that still a thing think

that's it

so yes basically we can have function

adaptors for single method interfaces

you can't do that if there's two methods

it doesn't make any sense so then

instead of a type you just have a

function so simpler and more versatile

and you can kind of do quirky stuff like

this this is real code this is a status

handler and it's a type that just is

based off int and implements the serve

HTTP method so it's an

itself is an HTTP handler so you can use

it you can map it in your routes and

things and this just just responds to a

request with a an HTTP status code so

then you can do it not found' handle it

just by casting an INT to that type you

know things like that and this is just

HTTP handlers as an example if you if

you've discovered your own single method

interfaces in your own contexts users

can do things like this and you can you

know with with kind of little little or

no effort which is awesome so structure

structuring packages as well structuring

the code properly and what do we really

mean by that well I think when when it

comes to deciding if you're gonna use a

package what I do is generally I'll scan

the list of files first and if there's

one file then I get the sense this is a

kind of small package it could still be

massive because this is nothing stopping

you having loads of stuff in that file

but we try try not to do that we try and

break things up and and group them a

little bit better there's a quote there

from David and unders I always like to

pronounce his name as if it's one word

for some reason David and unders it

seems to be better than perhaps you'd

like to consider changing it so he said

the first place I went to his voice it'd

be racist they said the first place I

look when considering using a package

are test files and this is kind of cool

right if you have a package and it's

open source and you want people to use

it they're gonna look at that and see

well is you know what's really the

quality of this yeah how good is this

package and if it doesn't have any tests

you sort of even if it's simple and

you've tested it yourself and you know

it works and it's brilliant still you

want you want to give people confidence

you want to you know they don't want to

be worrying about this this little thing

that they're using and so subfolders in

the project as well and we might as well

be similar to things that are emerging

because this is simpler and familiar and

it's kind of important and worth going

for so commands go into CMD packages

test data you know don't don't have a

folder

called some like I don't know a

different name for test data right it

seems now test data that's the name

where we that's where we put our test

data so let's just do that it's fine it

works great and so you never know

sometimes these patterns and things

might even become official a bit like

you know the vendor package and of like

internal as a folder you know it really

explains what the code is just just by

glancing at it there's a link here for a

great article actually goes into these

dracool I'll just pronounce the name and

there's a couple of things so use

multiple go files you know let's break

it by responsibility if you've got a

user type pop it pop it into users go

file at the top and then user related

things underneath it start with most

relevant at the top and go down to least

relevant that just as a general rule

make sense because if you think about

going to a new project and you think

okay I need to I want to know what this

user type is I need to figure just

figure something out

where you gonna look probably users go

file so in there that's where you should

be you know there's no reason to get

kind of creative at that level we might

as well go for being similar another

thing I would say for package writers is

to leave concurrency to the user we

naturally want to make the packages

useful and as awesome as possible and we

want to do concurrency because it's fun

and calling go but it's not always

obvious that what's happening and being

obvious is is pretty vital I think so so

here's this function do amazing thing

inside that it's going to go off and do

the amazing thing and that might make

perfect sense now we might want to

document that to say you know oh this is

going to run background tasks or maybe

we change the name so it's start so it's

clear that it's starting something but

actually you take away something from

the user which is the option to use it

as a blocking function which they may

want to do if if you

they can always do this themselves right

they can always manage the concurrency

on their end and they'll know it's going

to happen rather than it being magic and

inside the package and then like I said

they can use it in a blocking way to say

have then they have both options so if

unless you've got a great reason for

doing it which is most of these in fact

all any time there's a rule there's

always a great reason why you would

break that rule so absolutely that

doesn't still apply but I'm just talking

kind of generally right let's leave

concurrency is please leave concurrency

to the user

hopefully you're the first user of the

package this speaks a little bit to

building something that you need rather

than trying to kind of guess and and

just do something because you want to

aux it's fun but but if you are the

first user real user it's going to be a

better package and there's some things

you can do to help come at home one of

them is test-driven development I don't

think there's a more boring task than

writing unit tests for code that already

exists I can't be bothered to do that

for some reason I can't I'm not I'm not

doing it I'm not doing it right but when

I'm writing those tests like as at the

same time that I'm writing the package

when I'm doing it TDD style I very happy

to write those tests so that's that

might be a personal thing for me but I

know for sure that you know test-driven

development it drives up the code

coverage that you get and also helps you

think about since since you're writing a

test you sort of start to use the

package before it really exists so

you're already thinking ah so how would

I want how would I expect this to be

used or what would be the simplest way

to do this and you get to have that kind

of conversation you also know you're

aware of the API footprint from the very

beginning which is very important to

follow conventions and you know be

similar let's be similar to each other

in encode

yeah encode don't everyone like recede

your hairline I'm not saying you have to

be similar to me in that way

but don't think we can get it this after

right that's still a thing we can do if

so put some more hair in for me okay

don't talk about hair rule one in it

broke a know don't surprise people

either you know it's we do want to be

creative and and show off that we're

smart and cool don't make it boring make

it obvious because actually you can be

creative in different ways than actually

end up mattering a lot more so be

obvious not clever some write some jokes

now guys you ready this one I actually

did write the three hardest things

encoding our naming things in validating

the cache and in validating the cache no

that's what I thought

dead silence for anyone at home watching

this on YouTube later the audience isn't

miked up so if it's deadly silent after

I do a joke that's just because you know

you can't hear it but they'll absolutely

love in it brilliant we can put sound

into another one three hardest things

encoding are naming things off by one

errors yeah pathetic not doing it I'm

not I'm not doing jokes again not worth

it it's embarrassing but in both of

these jokes you will notice but they're

harder you know number one both of these

cases is naming things and that is kind

of key so let's think about again from a

user's point of view remember that the

package name is part of the API here's

an example we have a bruty function you

know this is how we write code like this

inside the package it makes sense we're

gonna brew some tea

we're gonna take a steep time and return

an error yep

cuz you can you can burn yourself or

have enough hot water

I don't know so but from the outside we

to use that you say tea brew tea and so

we get the bit of redundancy it's in

enough to say tea brew and so again

think about from the users perspective

TDOT Brook makes perfect sense and it's

much nicer I think so

export um I mean then by exposed

yourself to the API footprint from the

beginning this is really TDD helps to do

this you know when you press dot and see

that little list that's really I think

sometimes it that's all the

documentation you need for good packages

you only need to see that and it's quite

obvious what you're gonna do some cases

are more difficult and you need you know

more there's a lot more types or the

concepts are harder to model whatever so

totally fine but there's things we can

do to help in this way too which is one

of them is to put test code in a

different package so in the same folder

still but use the underscore test

package name and what that does is it

means that you have to in order to call

the methods and use the types from your

package you have to use the package name

and you have to import it so you get to

see how people are gonna use this again

you get to see that directly as you're

kind of writing it and you can use go

doc early too if you do go doc HTTP 8080

or whatever it will on localhost 8080

will give you the go doc thing but with

loads of extra packages basically

everything you've you've go get it could

be that but also the package you're

working on and you can see that too and

kind of refresh it and and get a sense

of that footprint as well for your

package because that's really what

remember that's the first thing people

are gonna see probably when they if

they're considering using your code and

this isn't all about open source this

all this all this stuff applies to your

own internal packages as well you know

having you your future self is also

gonna use the package as well as your

teammates and things like this so it all

applies still but it's especially true I

think with with open source

don't log stuff out of a package it's

annoying

Oh make it make it a dependency or

something you can control to turn it off

for debugging and maybe even for your

own case you definitely want those log

statements there but but not everyone

does or they might do logging

differently or you know and you sort of

take away that control by by just

logging things directly so avoid that I

would say make zero values useful this

applies everywhere but it's quite nice

so I have this greeter type here and you

can see the greet method checks to see

if the format's empty and if it is used

as a default format and that means we

can we can use the types just by you

know declaring it and get on and use it

so we say hi to Dean by just creating a

greeter without having to actually do

anything but then that also we can we

can control it you know so zip you know

think about that too

what's the what's the behavior of this

by default this extends to even if if

your code is going to connect to say nsq

then then nsq has default ports and

things that it will listen to so just

you have them as the default right it

makes sense so you can just start nsq

run the thing and it sort of works

without having you having to do those

extra cognitive steps if you can avoid

constructors do and the reason for that

is if you look at this we have this

we're creating a brewer here to brew

some more tea and bert in the top

example we don't know what's happening

we can't really be sure but what's being

allocated is it kicking off go routines

we'd have to go and look at the code if

we if we want to find out about that

versus the second one which basically

it's a bit more typing so you know

generally we'll think we want to be

willing to help our users by not making

them type too much so we'll do the top

one but the second one is actually a lot

clearer look you know that you're

creating a brewer that's what you're

allocating you set in this deep time

before you sort of had you'd have to

know the argument name to see what that

what

two minutes means and you know that no

go routines is starting it's not doing

anything else

magic you've got it there so if you can

do that I think that's a good practice

to do plus you shrink the API footprint

because you then don't need the extra

function to create the thing now again

sometimes you know you've got ten

channels you've got a create and some

maps and stuff and it would be a pain to

expect users to do that then call do a

constructor avoid it if you can I would

say don't automatically add interfaces

yeah this you know again we think we're

gonna we want this interface we've found

maybe it's a single method interface and

we love it or maybe it's just something

that we want other people to implement

you know as as this it grows this and

grows in success in popularity this

package but we don't need to add that

interface necessarily so don't

automatically do it here's an example we

have their greeter again and we have a

format greeter what we kind of don't

really need both of those and it's not

gonna be obvious when someone starts to

use this what which one they use you

know they could easily try and create a

discreet to type and things so so it's

about shrinking the API footprint if you

do want to keep the interface you could

actually not expose the other one don't

expose the structure the actual

implementation but have a function that

creates that and you can kind of keep

your types internally and this is nice

because then you have a greeter

interface only there's a function that

returns a greeter but it happens to do

you know it happens to be greet using a

format we could have other types or the

people could add them later so yes use

go like names this is a thing I have

seen code where somebody's done a port

from say Java or Ruby and you end up

with very big method names and it's you

know it's kind of really telling you

exactly everything

it's going on go doesn't really have

that style it tends we tend to prefer

smaller and more succinct examples one

example I saw online was like Marshall

with indentation could be just you know

and is Marshall indent you know simple

tells you enough without properly you

know x over explaining and similarly

like tear down you might be doing

something that's going to tear something

down but maybe maybe we just use clothes

because clothes as a concept we have

there's even an interface closer so you

know maybe that makes sense

ask the user for HTTP client if you are

making HTTP requests let the user

provide the client they can control it

and in some cases if you didn't do this

like on App Engine you can't make

requests using the default client on App

Engine you have to ask for a new client

from the URL fetch package so you

actually prevent your code from being

able to run in App Engine just because

you know you're kind of making that

decision about the HTTP client by all

means you know make the zero make the

default useful so default to the default

client if you like but let the user give

you their client context probably should

be the first argument if you're gonna

have context have is the first argument

I did see an example somewhere where

there were a few arguments and context

was just one of them and it kind of just

felt weird so I put this slide in there

yes don't mess with the global state

please so don't add flags even though

that might make perfect sense and you

might think well in every case when

someone's going to use my package it's

gonna be in a command and these are

flags that are standard and all that

there's probably some great reasons why

you'd want to do it but I think it's

better to avoid it because it sort of

just pollutes things and it has some

surprising side effects similarly if you

can avoid in it as well you know it can

be it can definitely be misused in it

and really it's it's just not clear to

the to somebody what's going to have

and really being clarity and being

obvious and things of sort of the the

goal and don't mess with anything in the

standard library for example there was a

something which set a timeout in the

default client it added a timeout so it

changed the default client or something

like this it did something you know

which made sense in that in the wrong

context but just by importing a package

suddenly you've changed something and

you're gonna have kind of strange side

effects potentially so avoid side

effects and magic and be obvious and

clear sub packages are just packages

we'd advise and originally we had this

test package it's an interface test so

it's basically a function that you call

in test code and it tests against the

interface but it tests an implementation

so you know if if you want to write an

implementation for vice as long as these

tests pass then it's okay it's good it

can go in which is a cool little thing

if you if you are exposing an interface

and you want you want people to write

implementations that's a nice way to

help them do that but we had if you look

at the import path its Vice slash test

so in that context it's very clear what

that is but in the code

suddenly it's just the package name is

just test so you're saying test

transport and it's like not sure what

that is anymore so we changed it to vice

test so there's a bit of redundancy now

in the import path which is part of the

user experience so we you know we want

that to be nice and succinct and simple

there's a little bit there but it's

probably worth it because now in the

function bodies we say vice test dot

transport both clear and and very

obvious come up with a good name for

your packages and you can be a bit

creative here but also make sure it's

kind of clear what it is

vice isn't a great example of this but

you know coming up with names that are

gonna be easy quick to type and because

you know package name remember it's

gonna they're gonna use that throughout

the code so these names should be nice

and short and

to the point and not every go project

needs to mention go if it's a client

like AWS client for go

that makes sense go AWS cool otherwise I

don't think we need to to do it but and

even in that case if you import a

package called AWS you know it's in go

that's sort of enough I think for you to

remember that this is a go project give

your project a logo or a mascot I can't

stress how surprising the response to

your code I forgot how I started that

sentence so icon I can't express how I

can't express Halon was very surprised

bald man can't be fooled twice don't

listen to that statistic I made it it's

falling apart in it guys no it's not

it's going well don't look at me like

that going well okay sorry yeah

I'm not kidding though right a project

with a logo just gets is I don't know

why some emotional buy-in or something

and and it's just a great way to have

some fun I'm again I'm going to prove

this to you now we're gonna play a

little game that I like to call name

that project so I want you to shout out

so this is audience participation and

people at home on YouTube I don't care

where you are shout it out please I'm

going to show you a logo and you tell me

what the project is and this the point

of this is to show you that the the logo

helps remember a project so we'll start

with an easy one what about this one mmm

buffalo is it buffalo or go buffalo oh

okay

good point well oh yeah okay this one

might be a bit tough yes it's a gorilla

what's the project gorilla toolkit

correct yeah we probably everyone in

this room's use this actually in and

this Biffen and you know it's an it's

not very prominent logo

so it sort of speaks to my point which

is you know you well I don't know forget

it this one yeah anyone at the back want

to join in no that's fine

yep that's Travis this one's one of my

favorites

correct what about that got some got

some programmers in okay

might be a bit tough anyone know this

hmm nsq yeah no yeah all right tough one

Hugo at the the t-shirt the what the

logo on the t-shirt

not the not their gopher not the Gopher

eyes me little the little t-shirt what's

that

come on guys join in it's not fun if you

just yes get hurt brilliant cool um okay

that was good one it really good that

bit okay computers can help to computers

there are tools which will help you know

you can ruin go lint go vet there's a

metal inter which kind of runs all of

them and you can you can have this

running every time you save and every

time you run your tests and things so

that you see quite early you start

seeing things like oh this this exported

thing should be should have a comment

you know and if you if you don't do the

comments in in the kind of standard way

it'll prompt you to that as well then

it'll say yeah you know we we start the

comment with the method name generally

so do that and there's also go report

card which is quite cool and this this

is essentially a service that runs

essentially the the metal inter gives

you a a breakdown and a score and you

can see here that the

there's some lint problems in in Vice

when I run it so I only got 93% of that

but otherwise very good and this this

kind of helps it's it seems maybe it's

kind of game with buying a little bit

but the value in this is you if if this

is high scoring project it means that

the the person it's going to be familiar

to you first of all comma it's going to

be well-documented there aren't going to

be strangeness there aren't going to be

strange things like underscores in in

names and stuff like that you know it'll

catch it catch that kind of that kind of

stuff

and if we want to be self similar and

build a code base that we can pick up

and and use easily then then this is

this is these are all valuable things so

how do you spot a quality package then

do they did they use a go front if if

not then that's imagine seeing go code

that's not formatted now that would be

very strange and you probably wouldn't

have much confidence in it rightly or

wrongly it may be a brilliant package

but that's a thing to test to consider

when you look at it test files does it

are there any test files if not not

going to be happy probably not very

confident that this thing's going to do

what we expect it to do yeah they're

using Java names big big long

descriptions or Ruby we're in Ruby you

can just write a any method you want you

just write it like as a sentence with

underscores and it works which is

amazing but it didn't really it's not

really a go thing we don't have

you know catch-all methods and things

like that and finally how many

dependencies does it have and the fewer

the better probably because you know

there's less baggage coming along with

that with that package you know if it

just has the standard library it it's

you probably going to use it with a bit

more confidence especially as we're

still figuring out dependency management

and things like that you sort of avoid

the problem if there's no dependencies

obviously not always possible again but

is better I've said less is better

that's that's not even correct English

that's embarrassing fewer is better

sounds worse than it by thank you

[Applause]

